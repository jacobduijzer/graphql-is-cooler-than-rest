schema {
  query: queries
  mutation: mutations
  subscription: subscriptions
}

type queries {
  login(email: String! password: String!): LoginResult!
  movies("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String where: MovieFilterInput): MoviesConnection
  movie(id: Int!): Movie!
  moviesByGenre(genre: String!): [Movie!]!
  genres: [String!]!
  allMovies: [Movie!]!
}

type mutations {
  addReview(movieId: Int! rating: Int!): ReviewAddedPayload!
  deleteReview(reviewId: Int!): ReviewDeletedPayload!
  createAccount(firstName: String! lastName: String! email: String! password: String!): AccountAddedPayload!
  add(movieId: Int! rating: Int!): ReviewAddedPayload!
  delete(reviewId: Int!): ReviewDeletedPayload!
}

type subscriptions {
  onAccountAdded: AccountSubscriptionPayload!
  onReviewAdded: Review
  onReviewAddedForMovie(movieId: Int!): Review
}

"Defines when a policy shall be executed."
enum ApplyPolicy {
  "Before the resolver was executed."
  BEFORE_RESOLVER
  "After the resolver was executed."
  AFTER_RESOLVER
  "The policy is applied in the validation step before the execution."
  VALIDATION
}

input MovieFilterInput {
  and: [MovieFilterInput!]
  or: [MovieFilterInput!]
  id: IntOperationFilterInput
  title: StringOperationFilterInput
  description: StringOperationFilterInput
  year: IntOperationFilterInput
  genres: ListStringOperationFilterInput
}

"A connection to a list of items."
type MoviesConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [MoviesEdge!]
  "A flattened list of the nodes."
  nodes: [Movie]
  "Identifies the total count of items in the connection."
  totalCount: Int!
}

input IntOperationFilterInput {
  eq: Int
  neq: Int
  in: [Int]
  nin: [Int]
  gt: Int
  ngt: Int
  gte: Int
  ngte: Int
  lt: Int
  nlt: Int
  lte: Int
  nlte: Int
}

input StringOperationFilterInput {
  and: [StringOperationFilterInput!]
  or: [StringOperationFilterInput!]
  eq: String
  neq: String
  contains: String
  ncontains: String
  in: [String]
  nin: [String]
  startsWith: String
  nstartsWith: String
  endsWith: String
  nendsWith: String
}

input ListStringOperationFilterInput {
  all: StringOperationFilterInput
  none: StringOperationFilterInput
  some: StringOperationFilterInput
  any: Boolean
}

"Information about pagination in a connection."
type PageInfo {
  "Indicates whether more edges exist following the set defined by the clients arguments."
  hasNextPage: Boolean!
  "Indicates whether more edges exist prior the set defined by the clients arguments."
  hasPreviousPage: Boolean!
  "When paginating backwards, the cursor to continue."
  startCursor: String
  "When paginating forwards, the cursor to continue."
  endCursor: String
}

type Movie {
  snacks: [String]
  ratings: [Review]
  optimizedRatings: [Review]
  id: Int!
  title: String!
  description: String!
  year: Int!
  genres: [String!]!
}

"An edge in a connection."
type MoviesEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Movie
}

type Review {
  accountId: Int!
  id: Int!
  movieId: Int!
  rating: Int!
}

type LoginResult {
  bearerToken: String!
}

type ReviewAddedPayload {
  message: String!
}

type ReviewDeletedPayload {
  reviewId: Int!
  message: String!
}

type AccountSubscriptionPayload {
  account: Account!
  message: String!
}

type AccountAddedPayload {
  account: Account!
}

type Account {
  id: Int!
  firstName: String!
  lastName: String!
  email: String!
  createdAt: DateTime!
}

"The `DateTime` scalar represents an ISO-8601 compliant date time type."
scalar DateTime

"The purpose of the `cost` directive is to define a `weight` for GraphQL types, fields, and arguments. Static analysis can use these weights when calculating the overall cost of a query or response."
directive @cost("The `weight` argument defines what value to add to the overall cost for every appearance, or possible appearance, of a type, field, argument, etc." weight: String!) on SCALAR | OBJECT | FIELD_DEFINITION | ARGUMENT_DEFINITION | ENUM | INPUT_FIELD_DEFINITION

"The purpose of the `@listSize` directive is to either inform the static analysis about the size of returned lists (if that information is statically available), or to point the analysis to where to find that information."
directive @listSize("The `assumedSize` argument can be used to statically define the maximum length of a list returned by a field." assumedSize: Int "The `slicingArguments` argument can be used to define which of the field's arguments with numeric type are slicing arguments, so that their value determines the size of the list returned by that field. It may specify a list of multiple slicing arguments." slicingArguments: [String!] "The `slicingArgumentDefaultValue` argument can be used to define a default value for a slicing argument, which is used if the argument is not present in a query." slicingArgumentDefaultValue: Int "The `sizedFields` argument can be used to define that the value of the `assumedSize` argument or of a slicing argument does not affect the size of a list returned by a field itself, but that of a list returned by one of its sub-fields." sizedFields: [String!] "The `requireOneSlicingArgument` argument can be used to inform the static analysis that it should expect that exactly one of the defined slicing arguments is present in a query. If that is not the case (i.e., if none or multiple slicing arguments are present), the static analysis may throw an error." requireOneSlicingArgument: Boolean! = true) on FIELD_DEFINITION